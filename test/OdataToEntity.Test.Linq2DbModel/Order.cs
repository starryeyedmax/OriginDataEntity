//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/t4models).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;

using LinqToDB;
using LinqToDB.DataProvider.SqlServer;
using LinqToDB.Mapping;

namespace OdataToEntity.Test.Model
{
	/// <summary>
	/// Database       : OdataToEntity
	/// Data Source    : .\sqlexpress
	/// Server Version : 12.00.5203
	/// </summary>
	public partial class OdataToEntityDB : LinqToDB.Data.DataConnection
	{
		public ITable<Customer>  Customers  { get { return this.GetTable<Customer>(); } }
		public ITable<Order>     Orders     { get { return this.GetTable<Order>(); } }
		public ITable<OrderItem> OrderItems { get { return this.GetTable<OrderItem>(); } }

		public OdataToEntityDB()
		{
			InitDataContext();
		}

		public OdataToEntityDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		#region FreeTextTable

		public class FreeTextKey<T>
		{
			public T   Key;
			public int Rank;
		}

		[FreeTextTableExpression]
		public ITable<FreeTextKey<TKey>> FreeTextTable<TTable,TKey>(string field, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				((MethodInfo)(MethodBase.GetCurrentMethod())).MakeGenericMethod(typeof(TTable), typeof(TKey)),
				field,
				text);
		}

		[FreeTextTableExpression]
		public ITable<FreeTextKey<TKey>> FreeTextTable<TTable,TKey>(Expression<Func<TTable,string>> fieldSelector, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				((MethodInfo)(MethodBase.GetCurrentMethod())).MakeGenericMethod(typeof(TTable), typeof(TKey)),
				fieldSelector,
				text);
		}

		#endregion
	}

	[Table(Schema="dbo", Name="Customers")]
	public partial class Customer
	{
		[Column,        Nullable] public string Address { get; set; } // varchar(256)
		[PrimaryKey,    Identity] public int    Id      { get; set; } // int
		[Column,        NotNull ] public string Name    { get; set; } // varchar(128)
		[Column,        Nullable] public Sex?   Sex     { get; set; } // int

		#region Associations

		/// <summary>
		/// FK_Orders_AltCustomers_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="AltCustomerId", CanBeNull=true, IsBackReference=true)]
		public IEnumerable<Order> AltOrders { get; set; }

		/// <summary>
		/// FK_Orders_Customers_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="CustomerId", CanBeNull=true, IsBackReference=true)]
		public IEnumerable<Order> Orders { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="Orders")]
	public partial class Order
	{
		[Column,        Nullable] public int?            AltCustomerId { get; set; } // int
		[Column,     NotNull    ] public int             CustomerId    { get; set; } // int
		[Column,        Nullable] public DateTimeOffset? Date          { get; set; } // datetimeoffset(7)
		[PrimaryKey, Identity   ] public int             Id            { get; set; } // int
		[Column,     NotNull    ] public string          Name          { get; set; } // varchar(256)
		[Column,     NotNull    ] public OrderStatus     Status        { get; set; } // int

		#region Associations

		/// <summary>
		/// FK_Orders_AltCustomers
		/// </summary>
		[Association(ThisKey="AltCustomerId", OtherKey="Id", CanBeNull=true, KeyName="FK_Orders_AltCustomers", BackReferenceName= "AltOrders")]
		public Customer AltCustomer { get; set; }

		/// <summary>
		/// FK_Orders_Customers
		/// </summary>
		[Association(ThisKey="CustomerId", OtherKey="Id", CanBeNull=false, KeyName="FK_Orders_Customers", BackReferenceName="Orders")]
		public Customer Customer { get; set; }

		/// <summary>
		/// FK_OrderItem_Order_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="OrderId", CanBeNull=true, IsBackReference=true)]
		public IEnumerable<OrderItem> Items { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="OrderItems")]
	public partial class OrderItem
	{
		[Column,        Nullable] public int?     Count   { get; set; } // int
		[PrimaryKey, Identity   ] public int      Id      { get; set; } // int
		[Column,     NotNull    ] public int      OrderId { get; set; } // int
		[Column,        Nullable] public decimal? Price   { get; set; } // decimal(18, 0)
		[Column,     NotNull    ] public string   Product { get; set; } // varchar(256)

		#region Associations

		/// <summary>
		/// FK_OrderItem_Order
		/// </summary>
		[Association(ThisKey="OrderId", OtherKey="Id", CanBeNull=false, KeyName="FK_OrderItem_Order", BackReferenceName="Items")]
		public Order Order { get; set; }

		#endregion
	}

	public static partial class TableExtensions
	{
		public static Customer Find(this ITable<Customer> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Order Find(this ITable<Order> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static OrderItem Find(this ITable<OrderItem> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}
	}

    public enum OrderStatus
    {
        Unknown,
        Processing,
        Shipped,
        Delivering,
        Cancelled
    }

    public enum Sex
    {
        Male,
        Female
    }
}
